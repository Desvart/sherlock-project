% FILE DESCRIPTION ------------------------------------------------------------------------------- %
%
% 
%
% Author    : PHMorin <pierre-henri.morin@a3.epfl.ch>
% Date      : 2011.02.16
% Version   : 0.5.1
% Copyright : Copyleft ;-)
% ------------------------------------------------------------------------------------------------ %


% TODO ------------------------------------------------------------------------------------------- %
% - Detection
%
% - Autre méthodes de réductions de dimension
% - LDA
% - Kernel LDA / PCA
%
% - 20 EM iterations
% - Split & Merge EM
%
% - Autre techniques de classification
% - HMM
% - ICA (cf. Alain Dufaux)
% - SVM
% - AdaBoost
% - RŽseau de Neurones
%
% - Autre type de modŽlisation
% - Autoregressive model
% - ARMA
%
% - rejection class and rejection methods
%
% - Mêler le GMM(1) avec Bayes et supprimer Bayes dans les options initiales
% - Références concernant les fonction bas niveaux
% - Commentaires
% - Documentation
% ------------------------------------------------------------------------------------------------ %

function start050(paramSavingFilePath)
% start050 

    % ------------------------------------------------------------------------------------------------ %
    % Workspace initialization
    % ------------------------------------------------------------------------------------------------ %

    close all; clear all; clc;
    h_tic = tic;
    libPath = initWorkspace();


    % ------------------------------------------------------------------------------------------------ %
    % Create feature structure
    % ------------------------------------------------------------------------------------------------ %

    % --- Generate feature create from gaussian models
    % featParam.mu = [0 9 18];
    featParam.mu = [[0 0]' [9 0]' [0 9]'];
    % featParam.mu = [[0 0 0]' [9 0 0]' [0 0 9]'];
    featParam.nbFileC = [20 30 10];
    featParam.nbFeatF = 50;
    rawFeat = generateFeat(featParam);

    % --- Extract features from sound file coming from database
    % dbProp.path         = '../../Database/db_Duf_2C_Small/';
    % % dbProp.path         = '../../Database/db_Duf_5C/';
    % dbProp.snr          = [120,121]; % [training SRN, testing SNR]
    % 
    % featParam.h_extract = @extract_STDFT;
    % featParam.window    = sqrt(hann(1024, 'periodic'));
    % featParam.shift     = 1/4;
    % featParam.powThr    = 25; % dB
    % featParam.channel   = channelSelection('Bark');
    % 
    % rawFeat = extractDBFeat(dbProp, featParam);

    % Rearrange features
    % feat = typeA(rawFeat);
    feat = typeM(rawFeat);

    % --- Plot raw features if their dimension is lower than 4 and display them in a pcolor plot
    % plotSTDFT(feat);
    % plotFeat(feat);

    % Dispay some statistics about raw features 
    %(distance interclass, intraclass, mat de cov des class, vecteur propre et valeur propre des class)
    % displayRawFeatureStatistics(feat);


    % ------------------------------------------------------------------------------------------------ %
    % Training and testing loop - GMM
    % ------------------------------------------------------------------------------------------------ %

    % --- Learning parameters
    %   1  : training over all minus 1 files, testing over the last file
    %   0  : same as strategy 1 but this time all the crossvalidation are done
    % 0<x<1: training over x% of the database and testing over the (1-x)% remaining
    learningParam.nbIt     = 10;
    learningParam.strategy = .5;
    learningParam.randFlag = false;

    % --- Reduction parameters
    modelParam.pca = 10;
    modelParam.lda = 5;

    % --- Model parameters GMM
    modelParam.h_training = @trainingGMM;
    modelParam.h_testing  = @testingGMM;
    modelParam.nbGMM      = 1;
    modelParam.emTol      = 1e-6;

    % --- Model parameters HMM
    % modelParam.h_training = @trainingHMM;
    % modelParam.h_testing  = @testingHMM;
    % modelParam.nbState    = 3;
    % modelParam.nbGMM      = 1;
    % modelParam.emTol      = 1e-6;


    [loopLog,learningParam] = trainingAndTestingLoop(feat, learningParam, modelParam);


    % ------------------------------------------------------------------------------------------------ %
    % Analyse learning statistics
    % ------------------------------------------------------------------------------------------------ %

    % Compute learning statistics
    % stat = computeLearningStat(loopLog);
    stat.toc = 0;

    % Display learning statistics
    % plotLearningStat(stat);

    % ------------------------------------------------------------------------------------------------ %
    % Save logs
    % ------------------------------------------------------------------------------------------------ %

    deleteLogFile(1, 0);

    if ~exist('dbProp', 'var'),
        dbProp = [];
    end

    saveLogFile(dbProp, featParam, feat, learningParam, modelParam, loopLog, stat, h_tic);


    % ------------------------------------------------------------------------------------------------ %
    % Clean workspace
    % ------------------------------------------------------------------------------------------------ %

    rmpath(genpath(libPath));

end




function libPath = initWorkspace(libPath)

    % -------------------------------------------------------------------------------------------- %
    % Display script header
    % -------------------------------------------------------------------------------------------- %

    display('                                                                                    ');
    display('% -------------------------------------------------------------------------------- %');
    display('                    STATISTICAL SOUND RECOGNITION TOOLBOX                           ');
    display('                                 Beta 0.5.1                                         ');
    display('% -------------------------------------------------------------------------------- %');
    display('                                                                                    ');


    % -------------------------------------------------------------------------------------------- %
    % Add Statistical Sound Recognition Toolbox path to "Matlab search path"
    % -------------------------------------------------------------------------------------------- %
    
    if nargin == 1,
        scriptparameter('libraryPath', libPath);
    end
    
    addpath(genpath(scriptparameter('libraryPath')));
    
end


% EoF -------------------------------------------------------------------------------------------- %
